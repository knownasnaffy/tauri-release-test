name: Release
on:
    push:
        branches:
            - main

permissions:
    contents: write # to be able to publish a GitHub release
    issues: write # to be able to comment on released issues
    pull-requests: write # to be able to comment on released pull requests

jobs:
    release:
        needs:
            - build
            - changes
        if: ${{ needs.changes.outputs.isNewVersion == 'true' }}
        name: Release
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - uses: actions/download-artifact@v3
              with:
                  name: release-${{ needs.changes.outputs.newVersion }}-artifacts
                  path: src-tauri/target/release/bundle

            - uses: codfish/semantic-release-action@v3
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  plugins: |
                      ["@semantic-release/commit-analyzer", "@semantic-release/release-notes-generator", [ "@semantic-release/github", { "assets": "src-tauri/target/release/bundle/**/*" } ], "@semantic-release/npm", "@semantic-release/changelog", [ "@semantic-release/git", { "assets": ["CHANGELOG.md", "package.json", "package-lock.json"] } ] ]

    changes:
        runs-on: ubuntu-latest
        outputs:
            isNewVersion: ${{ steps.filter.outputs.new-release-published }}
            newVersion: ${{ steps.filter.outputs.release-version }}

        steps:
            - uses: actions/checkout@v3

            - uses: codfish/semantic-release-action@v3
              id: filter
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  plugins: |
                      ['@semantic-release/commit-analyzer']

    build:
        needs: changes
        strategy:
            fail-fast: false
            matrix:
                platform: [macos-latest, ubuntu-20.04, windows-latest]

        runs-on: ${{ matrix.platform }}
        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Install Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 20

            - uses: pnpm/action-setup@v2
              name: Install pnpm
              with:
                  version: 8
                  run_install: false

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - uses: actions/cache@v3
              name: Setup pnpm cache
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install

            - name: install Rust stable
              uses: dtolnay/rust-toolchain@stable

            - name: install dependencies (ubuntu only)
              if: matrix.platform == 'ubuntu-20.04'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

            - uses: tauri-apps/tauri-action@v0

            - uses: actions/upload-artifact@v3
              if: ${{ needs.changes.outputs.isNewVersion == 'true' }}
              with:
                  name: my-artifact
                  path: src-tauri/target/release/bundle/**/*
