name: Release
on:
    push:
        branches:
            - main

jobs:
    release:
        needs:
            - build
            - changes
        if: ${{ needs.changes.outputs.isNewVersion == 'true' }}
        name: Release
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0
                  persist-credentials: false

            - uses: actions/download-artifact@v3
              with:
                  path: release-artifacts/

            - uses: codfish/semantic-release-action@v3
              env:
                  GH_TOKEN: ${{ secrets.GH_TOKEN }}
              with:
                  extends: /home/runner/work/tauri-release-test/tauri-release-test/configs/release-config
                  additional-packages: |
                      ["@semantic-release/git"]

    changes:
        runs-on: ubuntu-latest
        outputs:
            isNewVersion: ${{ steps.filter.outputs.new-release-published }}
            newVersion: ${{ steps.filter.outputs.release-version }}

        steps:
            - uses: actions/checkout@v3
              with:
                  fetch-depth: 0
                  persist-credentials: false

            - uses: codfish/semantic-release-action@v3
              id: filter
              if: github.event_name == 'push' && github.ref == 'refs/heads/main'
              env:
                  GH_TOKEN: ${{ secrets.GH_TOKEN }}
              with:
                  dry-run: true

    build:
        needs: changes
        strategy:
            fail-fast: false
            matrix:
                platform: [macos-latest, ubuntu-20.04, windows-latest]

        runs-on: ${{ matrix.platform }}
        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Install Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 20

            - uses: pnpm/action-setup@v2
              name: Install pnpm
              with:
                  version: 8
                  run_install: false

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - uses: actions/cache@v3
              name: Setup pnpm cache
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install

            - name: Install dependencies (ubuntu only)
              if: matrix.platform == 'ubuntu-20.04'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

            - name: Install Rust stable
              uses: dtolnay/rust-toolchain@stable

            - name: Rust cache
              uses: swatinem/rust-cache@v2
              with:
                  workspaces: './src-tauri -> target'

            - name: Bump package.json version
              run: npm pkg set version='${{ needs.changes.outputs.newVersion }}'

            - name: Build app
              uses: tauri-apps/tauri-action@v0

            - uses: actions/upload-artifact@v3
              if: ${{ needs.changes.outputs.isNewVersion == 'true' && matrix.platform == 'windows-latest' }}
              with:
                  name: release-${{ needs.changes.outputs.newVersion }}-windows
                  path: |
                      src-tauri/target/release/bundle/**

            - uses: actions/upload-artifact@v3
              if: ${{ needs.changes.outputs.isNewVersion == 'true' && matrix.platform == 'macos-latest' }}
              with:
                  name: release-${{ needs.changes.outputs.newVersion }}-macos-dmg
                  path: |
                      src-tauri/target/release/bundle/dmg/tauri-release-test_*_x64.dmg

            - uses: actions/upload-artifact@v3
              if: ${{ needs.changes.outputs.isNewVersion == 'true' && matrix.platform == 'macos-latest' }}
              with:
                  name: release-${{ needs.changes.outputs.newVersion }}-macos-app
                  path: |
                      /Users/runner/work/tauri-release-test/tauri-release-test/src-tauri/target/release/bundle/macos/tauri-release-test.app.tar.gz

            - uses: actions/upload-artifact@v3
              if: ${{ needs.changes.outputs.isNewVersion == 'true' && matrix.platform == 'ubuntu-20.04' }}
              with:
                  name: release-${{ needs.changes.outputs.newVersion }}-ubuntu-deb
                  path: |
                      src-tauri/target/release/bundle/deb/tauri-release-test_${{ needs.changes.outputs.newVersion }}_amd64.deb

            - uses: actions/upload-artifact@v3
              if: ${{ needs.changes.outputs.isNewVersion == 'true' && matrix.platform == 'ubuntu-20.04' }}
              with:
                  name: release-${{ needs.changes.outputs.newVersion }}-ubuntu-appimage
                  path: |
                      src-tauri/target/release/bundle/appimage/tauri-release-test_${{ needs.changes.outputs.newVersion }}_amd64.AppImage
